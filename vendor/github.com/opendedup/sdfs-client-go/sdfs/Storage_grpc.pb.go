// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sdfs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	HashingInfo(ctx context.Context, in *HashingInfoRequest, opts ...grpc.CallOption) (*HashingInfoResponse, error)
	CheckHashes(ctx context.Context, in *CheckHashesRequest, opts ...grpc.CallOption) (*CheckHashesResponse, error)
	WriteChunks(ctx context.Context, in *WriteChunksRequest, opts ...grpc.CallOption) (*WriteChunksResponse, error)
	ReadChunks(ctx context.Context, in *ReadChunksRequest, opts ...grpc.CallOption) (*ReadChunksResponse, error)
	WriteSparseDataChunk(ctx context.Context, in *SparseDedupeChunkWriteRequest, opts ...grpc.CallOption) (*SparseDedupeChunkWriteResponse, error)
	ReadSparseDataChunk(ctx context.Context, in *SparseDedupeChunkReadRequest, opts ...grpc.CallOption) (*SparseDedupeChunkReadResponse, error)
	GetMetaDataDedupeFile(ctx context.Context, in *MetaDataDedupeFileRequest, opts ...grpc.CallOption) (StorageService_GetMetaDataDedupeFileClient, error)
	GetSparseDedupeFile(ctx context.Context, in *SparseDedupeFileRequest, opts ...grpc.CallOption) (StorageService_GetSparseDedupeFileClient, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) HashingInfo(ctx context.Context, in *HashingInfoRequest, opts ...grpc.CallOption) (*HashingInfoResponse, error) {
	out := new(HashingInfoResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/HashingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) CheckHashes(ctx context.Context, in *CheckHashesRequest, opts ...grpc.CallOption) (*CheckHashesResponse, error) {
	out := new(CheckHashesResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/CheckHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) WriteChunks(ctx context.Context, in *WriteChunksRequest, opts ...grpc.CallOption) (*WriteChunksResponse, error) {
	out := new(WriteChunksResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/WriteChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ReadChunks(ctx context.Context, in *ReadChunksRequest, opts ...grpc.CallOption) (*ReadChunksResponse, error) {
	out := new(ReadChunksResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/ReadChunks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) WriteSparseDataChunk(ctx context.Context, in *SparseDedupeChunkWriteRequest, opts ...grpc.CallOption) (*SparseDedupeChunkWriteResponse, error) {
	out := new(SparseDedupeChunkWriteResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/WriteSparseDataChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ReadSparseDataChunk(ctx context.Context, in *SparseDedupeChunkReadRequest, opts ...grpc.CallOption) (*SparseDedupeChunkReadResponse, error) {
	out := new(SparseDedupeChunkReadResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.StorageService/ReadSparseDataChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetMetaDataDedupeFile(ctx context.Context, in *MetaDataDedupeFileRequest, opts ...grpc.CallOption) (StorageService_GetMetaDataDedupeFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StorageService_serviceDesc.Streams[0], "/org.opendedup.grpc.StorageService/GetMetaDataDedupeFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceGetMetaDataDedupeFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageService_GetMetaDataDedupeFileClient interface {
	Recv() (*ChunkResponse, error)
	grpc.ClientStream
}

type storageServiceGetMetaDataDedupeFileClient struct {
	grpc.ClientStream
}

func (x *storageServiceGetMetaDataDedupeFileClient) Recv() (*ChunkResponse, error) {
	m := new(ChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) GetSparseDedupeFile(ctx context.Context, in *SparseDedupeFileRequest, opts ...grpc.CallOption) (StorageService_GetSparseDedupeFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StorageService_serviceDesc.Streams[1], "/org.opendedup.grpc.StorageService/GetSparseDedupeFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceGetSparseDedupeFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageService_GetSparseDedupeFileClient interface {
	Recv() (*ChunkResponse, error)
	grpc.ClientStream
}

type storageServiceGetSparseDedupeFileClient struct {
	grpc.ClientStream
}

func (x *storageServiceGetSparseDedupeFileClient) Recv() (*ChunkResponse, error) {
	m := new(ChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility
type StorageServiceServer interface {
	HashingInfo(context.Context, *HashingInfoRequest) (*HashingInfoResponse, error)
	CheckHashes(context.Context, *CheckHashesRequest) (*CheckHashesResponse, error)
	WriteChunks(context.Context, *WriteChunksRequest) (*WriteChunksResponse, error)
	ReadChunks(context.Context, *ReadChunksRequest) (*ReadChunksResponse, error)
	WriteSparseDataChunk(context.Context, *SparseDedupeChunkWriteRequest) (*SparseDedupeChunkWriteResponse, error)
	ReadSparseDataChunk(context.Context, *SparseDedupeChunkReadRequest) (*SparseDedupeChunkReadResponse, error)
	GetMetaDataDedupeFile(*MetaDataDedupeFileRequest, StorageService_GetMetaDataDedupeFileServer) error
	GetSparseDedupeFile(*SparseDedupeFileRequest, StorageService_GetSparseDedupeFileServer) error
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (*UnimplementedStorageServiceServer) HashingInfo(context.Context, *HashingInfoRequest) (*HashingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HashingInfo not implemented")
}
func (*UnimplementedStorageServiceServer) CheckHashes(context.Context, *CheckHashesRequest) (*CheckHashesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHashes not implemented")
}
func (*UnimplementedStorageServiceServer) WriteChunks(context.Context, *WriteChunksRequest) (*WriteChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteChunks not implemented")
}
func (*UnimplementedStorageServiceServer) ReadChunks(context.Context, *ReadChunksRequest) (*ReadChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadChunks not implemented")
}
func (*UnimplementedStorageServiceServer) WriteSparseDataChunk(context.Context, *SparseDedupeChunkWriteRequest) (*SparseDedupeChunkWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteSparseDataChunk not implemented")
}
func (*UnimplementedStorageServiceServer) ReadSparseDataChunk(context.Context, *SparseDedupeChunkReadRequest) (*SparseDedupeChunkReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSparseDataChunk not implemented")
}
func (*UnimplementedStorageServiceServer) GetMetaDataDedupeFile(*MetaDataDedupeFileRequest, StorageService_GetMetaDataDedupeFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMetaDataDedupeFile not implemented")
}
func (*UnimplementedStorageServiceServer) GetSparseDedupeFile(*SparseDedupeFileRequest, StorageService_GetSparseDedupeFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSparseDedupeFile not implemented")
}
func (*UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}

func RegisterStorageServiceServer(s *grpc.Server, srv StorageServiceServer) {
	s.RegisterService(&_StorageService_serviceDesc, srv)
}

func _StorageService_HashingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).HashingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/HashingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).HashingInfo(ctx, req.(*HashingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_CheckHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHashesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).CheckHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/CheckHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).CheckHashes(ctx, req.(*CheckHashesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_WriteChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).WriteChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/WriteChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).WriteChunks(ctx, req.(*WriteChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ReadChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ReadChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/ReadChunks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ReadChunks(ctx, req.(*ReadChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_WriteSparseDataChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SparseDedupeChunkWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).WriteSparseDataChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/WriteSparseDataChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).WriteSparseDataChunk(ctx, req.(*SparseDedupeChunkWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ReadSparseDataChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SparseDedupeChunkReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ReadSparseDataChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.StorageService/ReadSparseDataChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ReadSparseDataChunk(ctx, req.(*SparseDedupeChunkReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetMetaDataDedupeFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetaDataDedupeFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).GetMetaDataDedupeFile(m, &storageServiceGetMetaDataDedupeFileServer{stream})
}

type StorageService_GetMetaDataDedupeFileServer interface {
	Send(*ChunkResponse) error
	grpc.ServerStream
}

type storageServiceGetMetaDataDedupeFileServer struct {
	grpc.ServerStream
}

func (x *storageServiceGetMetaDataDedupeFileServer) Send(m *ChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageService_GetSparseDedupeFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SparseDedupeFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).GetSparseDedupeFile(m, &storageServiceGetSparseDedupeFileServer{stream})
}

type StorageService_GetSparseDedupeFileServer interface {
	Send(*ChunkResponse) error
	grpc.ServerStream
}

type storageServiceGetSparseDedupeFileServer struct {
	grpc.ServerStream
}

func (x *storageServiceGetSparseDedupeFileServer) Send(m *ChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _StorageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.opendedup.grpc.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HashingInfo",
			Handler:    _StorageService_HashingInfo_Handler,
		},
		{
			MethodName: "CheckHashes",
			Handler:    _StorageService_CheckHashes_Handler,
		},
		{
			MethodName: "WriteChunks",
			Handler:    _StorageService_WriteChunks_Handler,
		},
		{
			MethodName: "ReadChunks",
			Handler:    _StorageService_ReadChunks_Handler,
		},
		{
			MethodName: "WriteSparseDataChunk",
			Handler:    _StorageService_WriteSparseDataChunk_Handler,
		},
		{
			MethodName: "ReadSparseDataChunk",
			Handler:    _StorageService_ReadSparseDataChunk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMetaDataDedupeFile",
			Handler:       _StorageService_GetMetaDataDedupeFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSparseDedupeFile",
			Handler:       _StorageService_GetSparseDedupeFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Storage.proto",
}

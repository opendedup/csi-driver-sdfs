// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sdfs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SDFSEventServiceClient is the client API for SDFSEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SDFSEventServiceClient interface {
	GetEvent(ctx context.Context, in *SDFSEventRequest, opts ...grpc.CallOption) (*SDFSEventResponse, error)
	ListEvents(ctx context.Context, in *SDFSEventListRequest, opts ...grpc.CallOption) (*SDFSEventListResponse, error)
	SubscribeEvent(ctx context.Context, in *SDFSEventRequest, opts ...grpc.CallOption) (SDFSEventService_SubscribeEventClient, error)
}

type sDFSEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSDFSEventServiceClient(cc grpc.ClientConnInterface) SDFSEventServiceClient {
	return &sDFSEventServiceClient{cc}
}

func (c *sDFSEventServiceClient) GetEvent(ctx context.Context, in *SDFSEventRequest, opts ...grpc.CallOption) (*SDFSEventResponse, error) {
	out := new(SDFSEventResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.SDFSEventService/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDFSEventServiceClient) ListEvents(ctx context.Context, in *SDFSEventListRequest, opts ...grpc.CallOption) (*SDFSEventListResponse, error) {
	out := new(SDFSEventListResponse)
	err := c.cc.Invoke(ctx, "/org.opendedup.grpc.SDFSEventService/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sDFSEventServiceClient) SubscribeEvent(ctx context.Context, in *SDFSEventRequest, opts ...grpc.CallOption) (SDFSEventService_SubscribeEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SDFSEventService_serviceDesc.Streams[0], "/org.opendedup.grpc.SDFSEventService/SubscribeEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &sDFSEventServiceSubscribeEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SDFSEventService_SubscribeEventClient interface {
	Recv() (*SDFSEventResponse, error)
	grpc.ClientStream
}

type sDFSEventServiceSubscribeEventClient struct {
	grpc.ClientStream
}

func (x *sDFSEventServiceSubscribeEventClient) Recv() (*SDFSEventResponse, error) {
	m := new(SDFSEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SDFSEventServiceServer is the server API for SDFSEventService service.
// All implementations must embed UnimplementedSDFSEventServiceServer
// for forward compatibility
type SDFSEventServiceServer interface {
	GetEvent(context.Context, *SDFSEventRequest) (*SDFSEventResponse, error)
	ListEvents(context.Context, *SDFSEventListRequest) (*SDFSEventListResponse, error)
	SubscribeEvent(*SDFSEventRequest, SDFSEventService_SubscribeEventServer) error
	mustEmbedUnimplementedSDFSEventServiceServer()
}

// UnimplementedSDFSEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSDFSEventServiceServer struct {
}

func (*UnimplementedSDFSEventServiceServer) GetEvent(context.Context, *SDFSEventRequest) (*SDFSEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (*UnimplementedSDFSEventServiceServer) ListEvents(context.Context, *SDFSEventListRequest) (*SDFSEventListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (*UnimplementedSDFSEventServiceServer) SubscribeEvent(*SDFSEventRequest, SDFSEventService_SubscribeEventServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEvent not implemented")
}
func (*UnimplementedSDFSEventServiceServer) mustEmbedUnimplementedSDFSEventServiceServer() {}

func RegisterSDFSEventServiceServer(s *grpc.Server, srv SDFSEventServiceServer) {
	s.RegisterService(&_SDFSEventService_serviceDesc, srv)
}

func _SDFSEventService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDFSEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDFSEventServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.SDFSEventService/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDFSEventServiceServer).GetEvent(ctx, req.(*SDFSEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDFSEventService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDFSEventListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDFSEventServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.opendedup.grpc.SDFSEventService/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDFSEventServiceServer).ListEvents(ctx, req.(*SDFSEventListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SDFSEventService_SubscribeEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SDFSEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SDFSEventServiceServer).SubscribeEvent(m, &sDFSEventServiceSubscribeEventServer{stream})
}

type SDFSEventService_SubscribeEventServer interface {
	Send(*SDFSEventResponse) error
	grpc.ServerStream
}

type sDFSEventServiceSubscribeEventServer struct {
	grpc.ServerStream
}

func (x *sDFSEventServiceSubscribeEventServer) Send(m *SDFSEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SDFSEventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.opendedup.grpc.SDFSEventService",
	HandlerType: (*SDFSEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvent",
			Handler:    _SDFSEventService_GetEvent_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _SDFSEventService_ListEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeEvent",
			Handler:       _SDFSEventService_SubscribeEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "SDFSEvent.proto",
}
